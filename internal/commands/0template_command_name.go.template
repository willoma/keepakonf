package commands

import (
	"github.com/willoma/keepakonf/internal/log"
	"github.com/willoma/keepakonf/internal/status"
)

var _ = register(
	"command name",
	"<icon>",
	"Command description",
	ParamsDesc{},
	func(params map[string]any, logger *log.Logger, msg status.SendStatus) Command {
		return &commandName{
			command: command{logger, msg},
		}
	},
)

type commandName struct {
	command

	close    func()
}

func (c *commandName) Watch() {
	signals, close := external.WatchFile(c.logger, "/nonexistent")
	f.close = close

	go func() {
		for fstatus := range signals {
			if f.applying.Load() {
				// No update if it is currently applying
				continue
			}

			// TODO
		}
	}()
}

func (c *commandName) Stop() {
	if f.close != nil {
		f.close()
	}
}

func (c *commandName) Apply() bool {
	f.applying.Store(true)
	defer f.applying.Store(false)

	// TODO
	return false
}
